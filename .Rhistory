geom_line(x= data_set$Wind, y=y_pred)
geom_line(x= data_set$Wind, y=y_pred)
ggplot(data = data_set, aes(x= Wind, y=Ozone)) +
geom_point() +
geom_line(x= data_set$Wind, y=y_pred)
ggplot(data = data_set, aes(x= Wind, y=Ozone)) + geom_line(x= data_set$Wind, y=y_pred)
ggplot(data = data_set, aes(x= Wind, y=Ozone)) + geom_line(data_set$Wind, y_pred)
ggplot(data = data_set, aes(x= Wind, y=Ozone)) +
geom_line(aes(x= data_set$Wind, y=y_pred))
ggplot(data = data_set, aes(x= Wind, y=Ozone)) +
geom_point() +
geom_abline(intercept=fit_reg$coefficients[1],
slope = fit_reg$coefficients[2]) +
geom_line(aes(x= data_set$Wind, y=y_pred))
y_pred
y_pred1 = predict(fit_reg)
y_pred1
y_pred = predict(fit_pois)
y_pred
plot(data_set$Wind, data_set$Ozone)
abline(fit_reg, lwd=1.1, col="red")
plot(data_set$Wind, data_set$Ozone)
abline(fit_reg, lwd=1.5, col="red"); lines(fit_pois$fitted)
fit_pois$fitted.values
y_pred = fit_pois$fitted.values
plot(data_set$Wind, data_set$Ozone)
abline(fit_reg, lwd=1.5, col="red"); lines(fit_pois$fitted.values)
library(swirl)
swirl()
rgp1()
rgp2()
head(swiss)
mdl <- lm(Fertility ~ ., data = swiss)
vif(mdl)
mdl2 <- lm(Fertility ~ . -Examination, data = swiss)
vif(mdl2)
x1c <- simbias()
apply(x1c, 1, mean)
fit1 <- lm(Fertility ~ Agriculture, data=swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, data=swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- deviance(fit1)-deviance(fit3)
n <- (deviance(fit1) - deviance(fit3))/2
n/d
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
ravenData
mdl <- glm(ravenWinNum ~ ravenScore, family = binomial, data= ravenData)
lodds <- predict(mdl, data.frame(revenscore=c(0,3,6)))
lodds <- predict(mdl, data.frame(revenScore=c(0,3,6)))
lodds <- predict(mdl)
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)), type = "response")
predict(mdl, data.frame(ravenScore=c(0, 3, 6)), type = "response")
predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
summary(mdl)
confint(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000, 50))
swirl()
head(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
exp(confint(mdl, "date"))
which.max(hits[,'visits'])
hits[704,]
mdl$fitted.values[704]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <- glm(formula = visits ~ date, offset=log(visits+1), family = poisson, data = hits)
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset = log(visits + 1))
qpois(.95, mdl2$fitted.values[704])
library(UsingR)
data("diamond")
view(diamond)
View(diamond)
data_set <- diamond
y = data_set$price
x = data_set$carat
fit_reg = lm(y ~ x)
library(ggplot2)
ggplot(data = data_set, aes(x = data_set$carat, y = data_set$price)) +
geom_point() + geom_smooth(method = "lm", se = FALSE)
summary(fit_reg)
outcome_variability = sum((y-mean(y)^2))
y_pred = predict(fit_reg, newdata = data_set)
res_variability = sum((y-y_pred)^2))
y_variability = sum((y - mean(y))^2)
SSE = sum((y - mean(y))^2)
RSS = sum((y - y_pred)^2)
SSE = sum((y - mean(y))^2)
RSS = sum((y - y_pred)^2)
cal_r2 = 1 - RSS/SSE
cal_r2
summary(fit_reg)$R-squared
names(fit_reg)
sumarry(fit_reg)$qr
summary(fit_reg)$qr
summary(fit_reg)$R-squared
summary(fit_reg)$r-squared
summary(fit_reg)$rsquared
View(fit_reg)
summary(fit_reg)
summary(fit_reg)$sigma
(resid(fit_reg)^2/46
(resid(fit_reg)^2/46
resid(fit_reg)
((resid(fit_reg))^2)/46
sum(((resid(fit_reg))^2)) /46
sqrt(sum(((resid(fit_reg))^2)) /46)
summary(fit_reg)$sigma
var(y)
1 - (summary(fit_reg)$sigma) / (var(y))
summary(fit_reg)
cal_r2 = 1 - RSS/SSE
cal_r2
1 - (sum(resid(fit_rig)^2)) / (sum((y- mean(y))^2))
1 - (sum(resid(fit_reg)^2)) / (sum((y- mean(y))^2))
(sum((y- mean(y))^2)) / length(y)
var(y)
var(y) *  (length(y)/ (1- length(y)))
var(y) *  (length(y)/ (length(y) - 1))
var(y) * (length(y) - 1)) /   (length(y)
var(y) * (length(y) - 1)) /   (length(y))
var(y) * (length(y) - 1))
var(y) * (length(y) - 1)
var(y) * (length(y) - 1) / length(y)
sum((y- mean(y))^2
sum((y- mean(y))^2)
sum((y - mean(y))^2)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(concrete)
View(mixtures)
View(concrete)
library(ggplot2)
View(concrete)
head(mixtures)
ggplot(data=mixtures) + geom_point(aes(x= 1:1030, y= CompressiveStrength))
ggplot(data=mixtures) + geom_point(aes(x= 1:1030, y= CompressiveStrength,
colour =  Age))
ggplot(data=mixtures) + geom_point(aes(x= 1:1030, y= CompressiveStrength,
colour =  FlyAsh))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
ggplot(data=mixtures) + geom_histogram(aes(x= SuperPlasticizer))
head(mixtures)
ggplot(data=mixtures) + geom_histogram(aes(x= Superplasticizer))
ggplot(data=mixtures) + geom_histogram(aes(x= log(Superplasticizer + 1)))
ggplot(data=mixtures) + geom_histogram(aes(x= log(Superplasticizer)))
summary(mixtures)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
colnames(training)
grep(^"IL", x= colnames(training), ignore.case = T)
grep("^IL", x= colnames(training), ignore.case = T)
grepl("^IL", x= colnames(training), ignore.case = T)
columns = colnames(training)
filter = grepl("^IL", x= colnames(training), ignore.case = T)
columns[filter]
filter2 = columns[filter]
filter2
typeof(filter2)
View(filter2)
training2 = training[,colnames(training) %in% filter2]
head(training2)
training2 = training[,colnames(training) %in% filtered_columns]
filtered_columns = columns[filter]
training2 = training[,colnames(training) %in% filtered_columns]
head(training2)
preProcess(x = training2, method = "pca")
preProcess(x = training2, method = "pca", thresh = 0.90)
training3 = preProcess(x = training2, method = "pca", thresh = 0.80)
training3
View(training3)
View(training2)
View(testing)
head(training)
training2$diadiagnosis = training$diadiagnosis
modelFit = train(diadiagnosis ~ ., data=training2, method = "glm")
training2$diagnosis = training$diagnosis
modelFit = train(diadiagnosis ~ ., data=training2, method = "glm")
modelFit = train(diagnosis ~ ., data=training2, method = "glm")
modelFit
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
adData = data.frame(diagnosis,predictors)
train = createDataPartition(diagnosis, p = 0.50,list=FALSE)
test = createDataPartition(diagnosis, p = 0.50,list=FALSE)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
train = createDataPartition(diagnosis, p = 0.50,list=FALSE)
test = createDataPartition(diagnosis, p = 0.50,list=FALSE)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[-trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
set.seed(123); mydata = rnorm(10)
3
set.seed(123); mydata = rnorm(2)
mydata = rnorm(2)
set.seed(123); mydata = rnorm(2)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
colnames(training)
trainingindex = training[,58:69]
trainingindex = training[,58:69]
trestindex = testing[, 58:69]
preProcess(x= trainingindex, method = "pca", thresh = .90)
modelFit = train(diagnosis ~ ., data=trainingindex, method = "glm",
preProcess = NULL)
trainingindex = training[,c(1, 58:69)]
trestindex = testing[, c(1, 58:69)]
preProcess(x= trainingindex, method = "pca", thresh = .90)
modelFit = train(diagnosis ~ ., data=trainingindex, method = "glm",
preProcess = NULL)
modelFit
modelFit_pcs = train(diagnosis ~ ., data=trainingindex, method = "glm",
preProcess = "pca")
modelFit_pcs
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingindex = training[,c(1, 58:69)]
trestindex = testing[, c(1, 58:69)]
trainingindex
head(trainingindex)
preProcess(x= trainingindex, method = "pca", thresh = .90)
train_pcs = preProcess(x= trainingindex, method = "pca", thresh = .90)
rm(train_pcs)
train_pca = preProcess(x= trainingindex, method = "pca", thresh = .90)
modelFit = train(diagnosis ~ ., data=trainingindex, method = "glm",
preProcess = NULL)
modelFit
modelFit_pca = train(diagnosis ~ ., data=trainingindex, method = "glm",
preProcess = "pca")
modelFit_pca
train_pca_fit = preProcess(x= trainingindex, method = "pca", thresh = .90)
predict(train_pca_fit, trainingindex)
modelFit_pca_90 = train(diagnosis ~ ., data=modelFit_pca, method = "glm")
typeof(modelFit_pca)
train_pca
rm(train_pca)
train_pca_fit
train_pca = predict(train_pca_fit, trainingindex)
train_pca
typeof(train_pca)
modelFit_pca_90 = train(diagnosis ~ ., data=train_pca, method = "glm")
modelFit_pca_90
modelFit_pca
modelFit
modelFit_pca_90
train_pca80_fit = preProcess(x= trainingindex, method = "pca", thresh = .80)
train_pca80 = predict(train_pca80_fit, trainingindex)
train_pca80
train_pca80_fit
train_pca80 = predict(train_pca80_fit, trainingindex)
train_pca_90 = predict(train_pca_fit, trainingindex)
rm(train_pca)
modelFit_pca_90 = train(diagnosis ~ ., data=train_pca_90, method = "glm")
modelFit_pca_90
modelFit_pca80
train_pca80_fit = preProcess(x= trainingindex, method = "pca", thresh = .80)
train_pca80 = predict(train_pca80_fit, trainingindex)
modelFit_pca80 = train(diagnosis ~ ., data=train_pca80, method = "glm")
modelFit_pca80
train_pca_90
modelFit_pca_90
modelFit_pca80
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
force(vowel.train)
force(vowel.test)
head(vowel.train)
str(vowel.train)
vowel.test$y = as.factor(vowel.test$y)
vowel.train$y = as.factor(vowel.train$y)
str(vowel.train)
unique(vowel.train$y)
library(caret)
modelRF = train(y ~., data=vowel.train, method = "rf")
modelGBM = trian(y ~., data=vowel.train, method = "gbm")
modelGBM = train(y ~., data=vowel.train, method = "gbm")
pred_rf = predict(modelRF, newdata = vowel.test)
pred_rf
modelRF
pred_GBM = predict(modelGBM, newdata = vowel.test)
confusionMatrix(pred_rf, vowel.test$y)
confusionMatrix(pred_rf, vowel.test$y)$overall
confusionMatrix(pred_rf, vowel.test$y)$overall[1]
confusionMatrix(pred_GBM, vowel.test$y)$overall[1]
confusionMatrix(pred_rf, pred_GBM)
confusionMatrix(pred_rf, pred_GBM)$overall[1]
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
install.packages("miniUI")
data_original = mtcars
dataset_original = mtcars
head(dataset_original)
library(ggplot2)
qplot(mpg, hp, data=dataset_original, geom = "points")
qplot(mpg, hp, data=dataset_original, geom = "point")
qplot(mpg, hp, data=dataset_original, geom = "point", stat = "smooth")
qplot(mpg, hp, data=dataset_original, geom = "point")
g1 = ggplot() + geom_point(data = dataset_original,aes(x=mpg, y= hp) )
g1
g1 = ggplot() + geom_point(data = dataset_original,aes(x=mpg, y= hp)) +
xlab("Miles Per Gallog") +
ylab("Horse Power") +
ggtitle("HP Vs MPG")
ggplot() + geom_point(data = dataset_original,aes(x=mpg, y= hp)) +
xlab("Miles Per Gallog") +
ylab("Horse Power") +
ggtitle("HP Vs MPG")
g1 = ggplot() + geom_point(data = dataset_original,aes(x=mpg, y= hp)) +
xlab("Miles Per Gallog") +
ylab("Horse Power") +
ggtitle("HP Vs MPG")
g1
g1
g1 = ggplot() + geom_point(data = dataset_original,aes(x=mpg, y= hp)) +
xlab("Miles Per Gallog") +
ylab("Horse Power", size = 12 ) +
ggtitle("HP Vs MPG", size = 12)
gplot() + geom_point(data = dataset_original,aes(x=mpg, y= hp)) +
ggtitle("HP Vs MPG", size = 12) +
theme(axis.title.x = "Miles Per Gallon",
axis.title.y = "Horse Power",
)
ggplot() + geom_point(data = dataset_original,aes(x=mpg, y= hp)) +
ggtitle("HP Vs MPG", size = 12) +
theme(axis.title.x = "Miles Per Gallon",
axis.title.y = "Horse Power",
)
ggplot() + geom_point(data = dataset_original,aes(x=mpg, y= hp)) +
ggtitle("HP Vs MPG") +
theme(axis.title.x = "Miles Per Gallon",
axis.title.y = "Horse Power",
)
g1 = ggplot() + geom_point(data = dataset_original,aes(x=mpg, y= hp)) +
ggtitle("HP Vs MPG") +
xlab("Miles Per Gallon") +
ylab("Horse Power") +
theme(axis.title.x = element_text(size = 12, colour = "blue"),
axis.title.y = element_text(size = 12, colour = "blue")
)
g1
g1 = ggplot() + geom_point(data = dataset_original,aes(x=mpg, y= hp)) +
ggtitle("HP Vs MPG") +
xlab("Miles Per Gallon") +
ylab("Horse Power") +
theme(axis.title.x = element_text(size = 12, colour = "blue"),
axis.title.y = element_text(size = 12, colour = "blue"),
title = element_text(size = 12, colour = "red", face = "bold",
hjust = in[0.5,0.5]))
g1 = ggplot() + geom_point(data = dataset_original,aes(x=mpg, y= hp)) +
ggtitle("HP Vs MPG") +
xlab("Miles Per Gallon") +
ylab("Horse Power") +
theme(axis.title.x = element_text(size = 12, colour = "blue"),
axis.title.y = element_text(size = 12, colour = "blue"),
title = element_text(size = 12, colour = "red", face = "bold"))
g1
g1 = ggplot() + geom_point(data = dataset_original,aes(x=mpg, y= hp), colour = "blue", size=3) +
ggtitle("HP Vs MPG") +
xlab("Miles Per Gallon") +
ylab("Horse Power") +
theme(axis.title.x = element_text(size = 12, colour = "blue"),
axis.title.y = element_text(size = 12, colour = "blue"),
title = element_text(size = 12, colour = "red", face = "bold"))
g1
g1 = ggplot() + geom_point(data = dataset_original,aes(x=mpg, y= hp),
colour = "red", size=3) +
ggtitle("HP Vs MPG") +
xlab("Miles Per Gallon") +
ylab("Horse Power") +
theme(axis.title.x = element_text(size = 12, colour = "blue"),
axis.title.y = element_text(size = 12, colour = "blue"),
title = element_text(size = 12, colour = "red", face = "bold"))
g1
g1 = ggplot() + geom_point(data = dataset_original,aes(x=hp, y= mpg),
colour = "red", size=3) +
ggtitle("HP Vs MPG") +
xlab("Horse Power") +
ylab("Miles Per Gallon") +
theme(axis.title.x = element_text(size = 12, colour = "blue"),
axis.title.y = element_text(size = 12, colour = "blue"),
title = element_text(size = 12, colour = "red", face = "bold"))
g1
fit_reg = lm(mpg~hp, data=dataset_original)
mpg_pred = predict(fit_reg, data=dataset_original)
g1 + geom_line(data = mpg_pred)
g1 + geom_line(data = as.data.frame(mpg = mpg_pred))
g1 + geom_line(data = as.data.frame(mpg = mpg_pred), aes(x=mpg))
fit_reg$coefficients
g1 + geom_abline(intercept = fit_reg$coefficients[1],
slope = fit_reg$coefficients[2])
head(dataset_original)
qplot(x= am, y = mpg, geom="box", data = dataset_original)
qplot(x= am, y = mpg, geom="boxplot", data = dataset_original)
qplot(x= factor(dataset_original$am), y = mpg, geom="boxplot", data = dataset_original)
qplot(x= I(factor(am)), y = mpg, geom="boxplot", data = dataset_original)
boxplot(x= factor(dataset_original$am, y = dataset_original$mpg))
boxplot(x= factor(dataset_original$am), y = dataset_original$mpg))
boxplot(x= factor(dataset_original$am), y = dataset_original$mpg)
boxplot(x= dataset_original$am, y = dataset_original$mpg)
x = dataset_original$am
y = dataset_original$mpg
box(x,y)
box(x=x,y=y)
setwd("D:/C9_Final_Proj/Diamond_Data")
library(shiny)
library(UsingR)
?diamond
library(UsingR)
data("diamond")
data_set = diamond
fit_reg = lm(price ~ carat, data = data_set)
plot(data_set, pch = 16, col="blue",
ylab = "Price in Singapore dollars",
xlab = "Size of Diamond in Carat") +
abline(fit_reg, lwd =2, col="red")
library(rsconnect)
rsconnect::setAccountInfo(name='rfpfi8-snehangshu-roy',
token='01BA5FB052A921625F027E2A5E947D9E',
secret='<SECRET>')
library(rsconnect)
runApp()
setwd("D:/C9_Final_Proj")
?diamond
summary(fit_reg)
